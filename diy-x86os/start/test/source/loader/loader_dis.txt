
/home/jerry/Desktop/diy-x86os/diy-x86os/start/start/source/loader/loader.elf:     file format elf32-i386
/home/jerry/Desktop/diy-x86os/diy-x86os/start/start/source/loader/loader.elf
architecture: i386, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008000

Program Header:
    LOAD off    0x00000000 vaddr 0x00007000 paddr 0x00007000 align 2**12
         filesz 0x000000d4 memsz 0x000000d4 flags r--
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x000006bc memsz 0x000006bc flags r-x
    LOAD off    0x00002000 vaddr 0x00009000 paddr 0x00009000 align 2**12
         filesz 0x00000038 memsz 0x00000038 flags r--
    LOAD off    0x00003000 vaddr 0x0000b000 paddr 0x0000b000 align 2**12
         filesz 0x00002000 memsz 0x00002054 flags rw-
   STACK off    0x00000000 vaddr 0x00000000 paddr 0x00000000 align 2**4
         filesz 0x00000000 memsz 0x00000000 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006bc  00008000  00008000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .rodata       00000038  00009000  00009000  00002000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .data         00002000  0000b000  0000b000  00003000  2**12
                  CONTENTS, ALLOC, LOAD, DATA
  3 .bss          00000054  0000d000  0000d000  00005000  2**5
                  ALLOC
  4 .comment      0000002b  00000000  00000000  00005000  2**0
                  CONTENTS, READONLY
  5 .debug_aranges 00000060  00000000  00000000  00005030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  6 .debug_info   000009d5  00000000  00000000  00005090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 000003b7  00000000  00000000  00005a65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_line   00000440  00000000  00000000  00005e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_frame  00000330  00000000  00000000  0000625c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_str    0000045a  00000000  00000000  0000658c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_line_str 00000155  00000000  00000000  000069e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_rnglists 00000017  00000000  00000000  00006b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
00000000 l    df *ABS*	00000000 loader_16.c
00008018 l     F .text	0000000b cli
00008023 l     F .text	0000002a inb
0000804d l     F .text	00000030 outb
0000807d l     F .text	00000036 lgdt
000080b3 l     F .text	0000001a read_cr0
000080cd l     F .text	00000012 write_cr0
000080df l     F .text	0000002b far_jump
0000810a l     F .text	0000003c show_msg
00008146 l     F .text	00000139 detect_memory
0000827f l     F .text	00000092 enter_protect_mode
00000000 l    df *ABS*	00000000 loader_32.c
00008337 l     F .text	0000001d inb
00008354 l     F .text	00000021 outb
00008375 l     F .text	00000011 read_cr0
00008386 l     F .text	0000000c write_cr0
00008392 l     F .text	0000001f inw
000083b1 l     F .text	0000000c write_cr3
000083bd l     F .text	00000011 read_cr4
000083ce l     F .text	0000000c write_cr4
000083da l     F .text	00000130 read_disk
0000850a l     F .text	00000005 die
0000850f l     F .text	0000011a reload_elf_file
0000c000 l     O .data	00001000 page_dir.0
00008311 g     F .text	00000026 loader_entry
0000b000 g     O .data	00000018 gdt_table
0000866a g     F .text	00000052 load_kernel
00008629 g     F .text	00000041 enable_page_mode
0000d000 g     O .bss	00000054 boot_info
00008000 g       .text	00000000 _start
0000d000 g       .bss	00000000 __bss_start
00008003 g       .text	00000000 protect_mode_entry
0000d000 g       .data	00000000 _edata
0000d054 g       .bss	00000000 _end



Disassembly of section .text:

00008000 <_start>:
	.global _start   //这个标签指明了代码的入口为_start
_start:
    //栈和段等沿用之前的设置
    //不能直接跳到loader_entry因为需要预先知道在哪
    //boot没有这个能力，所以直接用汇编，以便使_start处于整个bin文件开头，这样boot直接跳到开头就可以了
    jmp loader_entry
    8000:	e9 0e 03             	jmp    8311 <loader_entry>

00008003 <protect_mode_entry>:
	//保护模式的入口处
	.global protect_mode_entry
	.extern load_kernel
protect_mode_entry:
	//进入32位模式下运行
	mov $16, %ax
    8003:	66 b8 10 00 8e d8    	mov    $0xd88e0010,%eax
	mov %ax, %ds
	mov %ax, %es
    8009:	8e c0                	mov    %ax,%es
	mov %ax, %ss
    800b:	8e d0                	mov    %ax,%ss
	mov %ax, %fs
    800d:	8e e0                	mov    %ax,%fs
	mov %ax, %gs
    800f:	8e e8                	mov    %ax,%gs
	//跳到c语言中去执行
	jmp $8, $load_kernel
    8011:	ea 6a 86 00 00       	ljmp   $0x0,$0x866a
    8016:	08 00                	or     %al,(%bx,%si)

00008018 <cli>:
#define CPU_INSTR_H

#include "comm/types.h"

//对关中断指令的封装
static inline void cli(void){   //函数内联是一种优化技术，它告诉编译器在每个调用函数的地方直接插入函数的代码，而不是通过函数调用的方式来执行函数
    8018:	66 55                	push   %ebp
    801a:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("cli");
    801d:	fa                   	cli    
}
    801e:	90                   	nop
    801f:	66 5d                	pop    %ebp
    8021:	66 c3                	retl   

00008023 <inb>:
static inline void sti(void){
    __asm__ __volatile__("sti");
}

//获取端口中的值（读8位）
static inline uint8_t inb(uint16_t port){
    8023:	66 55                	push   %ebp
    8025:	66 89 e5             	mov    %esp,%ebp
    8028:	66 83 ec 14          	sub    $0x14,%esp
    802c:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8031:	67 89 45 ec          	mov    %ax,-0x14(%ebp)
    uint8_t rv;
    __asm__ __volatile__("inb %[p], %[v]" : [v]"=a"(rv) : [p]"d"(port));
    8035:	67 66 0f b7 45 ec    	movzwl -0x14(%ebp),%eax
    803b:	66 89 c2             	mov    %eax,%edx
    803e:	ec                   	in     (%dx),%al
    803f:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    return rv;
    8043:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
}
    8049:	66 c9                	leavel 
    804b:	66 c3                	retl   

0000804d <outb>:

//写入端口
static inline void outb(uint16_t port,uint8_t data){
    804d:	66 55                	push   %ebp
    804f:	66 89 e5             	mov    %esp,%ebp
    8052:	66 83 ec 08          	sub    $0x8,%esp
    8056:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    805b:	67 66 8b 55 0c       	mov    0xc(%ebp),%edx
    8060:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    8064:	66 89 d0             	mov    %edx,%eax
    8067:	67 88 45 f8          	mov    %al,-0x8(%ebp)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
    806b:	67 66 0f b7 55 fc    	movzwl -0x4(%ebp),%edx
    8071:	67 66 0f b6 45 f8    	movzbl -0x8(%ebp),%eax
    8077:	ee                   	out    %al,(%dx)
}
    8078:	90                   	nop
    8079:	66 c9                	leavel 
    807b:	66 c3                	retl   

0000807d <lgdt>:

//加载gdt表
static inline void lgdt(uint32_t start,uint32_t size){
    807d:	66 55                	push   %ebp
    807f:	66 89 e5             	mov    %esp,%ebp
    8082:	66 83 ec 10          	sub    $0x10,%esp
        uint16_t limit;
        uint16_t start15_0;
        uint16_t start31_16; 
    }gdt;

    gdt.start31_16=start >> 16;
    8086:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    808b:	66 c1 e8 10          	shr    $0x10,%eax
    808f:	67 89 45 fe          	mov    %ax,-0x2(%ebp)
    gdt.start15_0=start & 0xFFFF;
    8093:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8098:	67 89 45 fc          	mov    %ax,-0x4(%ebp)
    gdt.limit=size-1;
    809c:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80a1:	66 83 e8 01          	sub    $0x1,%eax
    80a5:	67 89 45 fa          	mov    %ax,-0x6(%ebp)

    __asm__ __volatile__("lgdt %[g]"::[g]"m"(gdt));
    80a9:	67 0f 01 55 fa       	lgdtw  -0x6(%ebp)
}
    80ae:	90                   	nop
    80af:	66 c9                	leavel 
    80b1:	66 c3                	retl   

000080b3 <read_cr0>:

    __asm__ __volatile__("lidt %[g]"::[g]"m"(idt));
}

//读取cr0寄存器
static inline uint32_t read_cr0(void){
    80b3:	66 55                	push   %ebp
    80b5:	66 89 e5             	mov    %esp,%ebp
    80b8:	66 83 ec 10          	sub    $0x10,%esp
    uint32_t cr0;
    __asm__ __volatile("mov %%cr0, %[v]":[v]"=r"(cr0));
    80bc:	0f 20 c0             	mov    %cr0,%eax
    80bf:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    return cr0;
    80c4:	67 66 8b 45 fc       	mov    -0x4(%ebp),%eax
}
    80c9:	66 c9                	leavel 
    80cb:	66 c3                	retl   

000080cd <write_cr0>:

// //写入cr0寄存器
static inline void write_cr0(uint32_t m) {
    80cd:	66 55                	push   %ebp
    80cf:	66 89 e5             	mov    %esp,%ebp
    __asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(m));
    80d2:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80d7:	0f 22 c0             	mov    %eax,%cr0
}
    80da:	90                   	nop
    80db:	66 5d                	pop    %ebp
    80dd:	66 c3                	retl   

000080df <far_jump>:
        :
        : "memory"
    );
}

static inline void far_jump(uint32_t selector,uint32_t offset){   //selector是选择子，offset是偏移量
    80df:	66 55                	push   %ebp
    80e1:	66 89 e5             	mov    %esp,%ebp
    80e4:	66 83 ec 10          	sub    $0x10,%esp
   uint32_t addr[]={offset,selector};
    80e8:	67 66 8b 45 0c       	mov    0xc(%ebp),%eax
    80ed:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    80f2:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    80f7:	67 66 89 45 fc       	mov    %eax,-0x4(%ebp)
    __asm__ __volatile__("ljmpl *(%[a])"::[a]"r"(addr));
    80fc:	67 66 8d 45 f8       	lea    -0x8(%ebp),%eax
    8101:	67 66 ff 28          	ljmpl  *(%eax)
}
    8105:	90                   	nop
    8106:	66 c9                	leavel 
    8108:	66 c3                	retl   

0000810a <show_msg>:
#include"loader.h"
//贱种stdint...老是出来

boot_info_t boot_info;   //要作为参数传递到kernel里面

static void show_msg(const char* msg) {
    810a:	66 55                	push   %ebp
    810c:	66 89 e5             	mov    %esp,%ebp
    810f:	66 83 ec 10          	sub    $0x10,%esp
    char c;

    //使用bios写显存，持续往下写
    while ((c = *msg++) != '\0') {
    8113:	eb 0c                	jmp    8121 <show_msg+0x17>
        __asm__ __volatile__(
    8115:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    811b:	b4 0e                	mov    $0xe,%ah
    811d:	88 c0                	mov    %al,%al
    811f:	cd 10                	int    $0x10
    while ((c = *msg++) != '\0') {
    8121:	67 66 8b 45 08       	mov    0x8(%ebp),%eax
    8126:	67 66 8d 50 01       	lea    0x1(%eax),%edx
    812b:	67 66 89 55 08       	mov    %edx,0x8(%ebp)
    8130:	67 66 0f b6 00       	movzbl (%eax),%eax
    8135:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    8139:	67 80 7d ff 00       	cmpb   $0x0,-0x1(%ebp)
    813e:	75 d5                	jne    8115 <show_msg+0xb>
            "mov %[ch], %%al\n\t"    //[ch]是占位符，在下面的,输入操作数
            "int $0x10"::[ch]"r"(c)  //::是输入输出约束分隔符，后面制定了输入输出如何约束，r表示将c放在通用寄存器中(任意寄存器)
            //`::`：没有输出操作数用::
        );
    }
}
    8140:	90                   	nop
    8141:	90                   	nop
    8142:	66 c9                	leavel 
    8144:	66 c3                	retl   

00008146 <detect_memory>:
其中函数返回的结果是所有的可用内存，0x7c00以及0x8000的代码包含在其中
而在654336到1048576是用作显存，bios代码取得映射之类的
所以，剩下一共两块可用的区域
*/
//开始内存检测
static void detect_memory(void) {
    8146:	66 55                	push   %ebp
    8148:	66 89 e5             	mov    %esp,%ebp
    814b:	66 57                	push   %edi
    814d:	66 56                	push   %esi
    814f:	66 53                	push   %ebx
    8151:	66 83 ec 30          	sub    $0x30,%esp
    uint32_t contId = 0;     // `contID`：`contID`是用来记录内存检测的控制ID的变量。在这段代码中，`contID`用于控制内存检测过程中的迭代，通过不断改变`contID`的值来获取不同的内存信息。当`contID`为0时，表示内存检测结束。
    8155:	67 66 c7 45 f0 00 00 	movl   $0x0,-0x10(%ebp)
    815c:	00 00 
    SMAP_entry_t smap_entry;  //用于检测的中间信息
    int signature, bytes;
    //`signature`：`signature`用于存储从中断0x15返回的标识符。在这段代码中，`signature`的值用来判断中断返回的信息是否有效。如果`signature`的值不等于`0x534D4150`，则表示返回的信息无效，可能是由于中断调用失败或返回的数据不符合预期
    //`bytes`：`bytes`用于存储从中断0x15返回的字节数。在这段代码中，`bytes`的值用来判断返回的内存信息的长度是否符合预期。如果`bytes`的值大于20且`entry`的`ACPI`字段的最低位为0，则表示返回的信息有效且符合条件，可以继续处理

    show_msg("try to detect memory:");
    815e:	66 68 00 90 00 00    	pushl  $0x9000
    8164:	66 e8 a0 ff ff ff    	calll  810a <show_msg>
    816a:	66 83 c4 04          	add    $0x4,%esp

    boot_info.ram_region_count = 0;
    816e:	66 c7 06 50 d0 00 00 	movl   $0x0,-0x2fb0
    8175:	00 00 
    //循环依次将检测到的内存块信息存储到_boot_info_t中
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    8177:	67 66 c7 45 ec 00 00 	movl   $0x0,-0x14(%ebp)
    817e:	00 00 
    8180:	e9 d0 00             	jmp    8253 <detect_memory+0x10d>
        //通过定义一个指向结构体的指针，可以在不直接操作结构体变量的情况下，通过指针间接地访问和修改结构体的成员。这种方式在处理结构体数据时更加灵活和方便，可以避免不必要的数据复制和提高代码的可读性。
        SMAP_entry_t* entry = &smap_entry;
    8183:	67 66 8d 45 c8       	lea    -0x38(%ebp),%eax
    8188:	67 66 89 45 e8       	mov    %eax,-0x18(%ebp)

        __asm__ __volatile__("int $0x15"  //0x15中断可以获取内存状态
    818d:	66 b8 20 e8 00 00    	mov    $0xe820,%eax
    8193:	67 66 8b 5d f0       	mov    -0x10(%ebp),%ebx
    8198:	66 b9 18 00 00 00    	mov    $0x18,%ecx
    819e:	66 ba 50 41 4d 53    	mov    $0x534d4150,%edx
    81a4:	67 66 8b 75 e8       	mov    -0x18(%ebp),%esi
    81a9:	66 89 f7             	mov    %esi,%edi
    81ac:	cd 15                	int    $0x15
    81ae:	66 89 da             	mov    %ebx,%edx
    81b1:	67 66 89 45 e4       	mov    %eax,-0x1c(%ebp)
    81b6:	67 66 89 4d e0       	mov    %ecx,-0x20(%ebp)
    81bb:	67 66 89 55 f0       	mov    %edx,-0x10(%ebp)
                //前缀`=`表示这是一个输出操作数，而没有前缀`=`的操作数表示输入操作数
            : "=a"(signature), "=c"(bytes), "=b"(contId)
            : "a"(0xE820), "b"(contId), "c"(24), "d"(0x534D4150), "D"(entry));
        //总的来说这段代码是传入5个变量到寄存器中在调用0x15中断，返回的结束输出到3个变量中

        if (signature != 0x534D4150) {
    81c0:	67 66 81 7d e4 50 41 	cmpl   $0x534d4150,-0x1c(%ebp)
    81c7:	4d 53 
    81c9:	74 13                	je     81de <detect_memory+0x98>
            show_msg("failed.\r\n");
    81cb:	66 68 16 90 00 00    	pushl  $0x9016
    81d1:	66 e8 33 ff ff ff    	calll  810a <show_msg>
    81d7:	66 83 c4 04          	add    $0x4,%esp
    81db:	e9 92 00             	jmp    8270 <detect_memory+0x12a>
            return;
        }

        // todo: 20字节
        if (bytes > 20 && (entry->ACPI & 0x0001) == 0) {
    81de:	67 66 83 7d e0 14    	cmpl   $0x14,-0x20(%ebp)
    81e4:	7e 13                	jle    81f9 <detect_memory+0xb3>
    81e6:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81eb:	67 66 8b 40 14       	mov    0x14(%eax),%eax
    81f0:	66 83 e0 01          	and    $0x1,%eax
    81f4:	66 85 c0             	test   %eax,%eax
    81f7:	74 53                	je     824c <detect_memory+0x106>
            continue;
        }

        //保存RAM信息，只取32位，空间有限无需考虑更大容量的情况
        if (entry->Type == 1) {   //查到了
    81f9:	67 66 8b 45 e8       	mov    -0x18(%ebp),%eax
    81fe:	67 66 8b 40 10       	mov    0x10(%eax),%eax
    8203:	66 83 f8 01          	cmp    $0x1,%eax
    8207:	75 39                	jne    8242 <detect_memory+0xfc>
            boot_info.ram_region_cfg[boot_info.ram_region_count].start = entry->BaseL;  //只取低32位
    8209:	66 a1 50 d0          	mov    0xd050,%eax
    820d:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8212:	67 66 8b 12          	mov    (%edx),%edx
    8216:	67 66 89 14 c5 00 d0 	mov    %edx,0xd000(,%eax,8)
    821d:	00 00 
            boot_info.ram_region_cfg[boot_info.ram_region_count].size = entry->LengthL; //只取低32位
    821f:	66 a1 50 d0          	mov    0xd050,%eax
    8223:	67 66 8b 55 e8       	mov    -0x18(%ebp),%edx
    8228:	67 66 8b 52 08       	mov    0x8(%edx),%edx
    822d:	67 66 89 14 c5 04 d0 	mov    %edx,0xd004(,%eax,8)
    8234:	00 00 
            boot_info.ram_region_count++;
    8236:	66 a1 50 d0          	mov    0xd050,%eax
    823a:	66 83 c0 01          	add    $0x1,%eax
    823e:	66 a3 50 d0          	mov    %eax,0xd050
        }

        if (contId == 0) {
    8242:	67 66 83 7d f0 00    	cmpl   $0x0,-0x10(%ebp)
    8248:	74 15                	je     825f <detect_memory+0x119>
    824a:	eb 01                	jmp    824d <detect_memory+0x107>
            continue;
    824c:	90                   	nop
    for (int i = 0; i < BOOT_RAM_REGION_MAX; i++) {
    824d:	67 66 83 45 ec 01    	addl   $0x1,-0x14(%ebp)
    8253:	67 66 83 7d ec 09    	cmpl   $0x9,-0x14(%ebp)
    8259:	0f 8e 26 ff          	jle    8183 <detect_memory+0x3d>
    825d:	eb 01                	jmp    8260 <detect_memory+0x11a>
            break;
    825f:	90                   	nop
        }
    }
    show_msg("ok.\r\n");
    8260:	66 68 20 90 00 00    	pushl  $0x9020
    8266:	66 e8 9e fe ff ff    	calll  810a <show_msg>
    826c:	66 83 c4 04          	add    $0x4,%esp
}
    8270:	67 66 8d 65 f4       	lea    -0xc(%ebp),%esp
    8275:	66 5b                	pop    %ebx
    8277:	66 5e                	pop    %esi
    8279:	66 5f                	pop    %edi
    827b:	66 5d                	pop    %ebp
    827d:	66 c3                	retl   

0000827f <enter_protect_mode>:
    {0xFFFF, 0x0000, 0x9200, 0x00CF},
};


//进入保护模式的函数
static void enter_protect_mode() {
    827f:	66 55                	push   %ebp
    8281:	66 89 e5             	mov    %esp,%ebp
    8284:	66 83 ec 10          	sub    $0x10,%esp
    //第一步关中断
    cli();
    8288:	66 e8 8a fd ff ff    	calll  8018 <cli>

    //第二步要开启A20地址线，是的可以访问1M以上的空间
    //做法：读取0x92端口的值，与0x2与运算，再写回去
    uint8_t v = inb(0x92);
    828e:	66 68 92 00 00 00    	pushl  $0x92
    8294:	66 e8 89 fd ff ff    	calll  8023 <inb>
    829a:	66 83 c4 04          	add    $0x4,%esp
    829e:	67 88 45 ff          	mov    %al,-0x1(%ebp)
    outb(0x92, v | 0x2);
    82a2:	67 66 0f b6 45 ff    	movzbl -0x1(%ebp),%eax
    82a8:	66 83 c8 02          	or     $0x2,%eax
    82ac:	66 0f b6 c0          	movzbl %al,%eax
    82b0:	66 50                	push   %eax
    82b2:	66 68 92 00 00 00    	pushl  $0x92
    82b8:	66 e8 8f fd ff ff    	calll  804d <outb>
    82be:	66 83 c4 08          	add    $0x8,%esp

    //第三步，加载GDT表
    lgdt((uint32_t)gdt_table, sizeof(gdt_table));
    82c2:	66 b8 00 b0 00 00    	mov    $0xb000,%eax
    82c8:	66 6a 18             	pushl  $0x18
    82cb:	66 50                	push   %eax
    82cd:	66 e8 aa fd ff ff    	calll  807d <lgdt>
    82d3:	66 83 c4 08          	add    $0x8,%esp

    //第四步，把cr0寄存器的最低位置1，进入保护模式
    uint32_t cr0 = read_cr0();
    82d7:	66 e8 d6 fd ff ff    	calll  80b3 <read_cr0>
    82dd:	67 66 89 45 f8       	mov    %eax,-0x8(%ebp)
    write_cr0(cr0 | (1 << 0));
    82e2:	67 66 8b 45 f8       	mov    -0x8(%ebp),%eax
    82e7:	66 83 c8 01          	or     $0x1,%eax
    82eb:	66 50                	push   %eax
    82ed:	66 e8 da fd ff ff    	calll  80cd <write_cr0>
    82f3:	66 83 c4 04          	add    $0x4,%esp
    //cr0 = read_cr0();

    //由于原来实模式下cpu指令周期性分段执行（取址，执行等），切到保护模式要清空指令，进行远跳转
    // 长跳转进入到保护模式
    // 使用长跳转，以便清空流水线，将里面的16位代码给清空
    far_jump(8, (uint32_t)protect_mode_entry);
    82f7:	66 b8 03 80 00 00    	mov    $0x8003,%eax
    82fd:	66 50                	push   %eax
    82ff:	66 6a 08             	pushl  $0x8
    8302:	66 e8 d7 fd ff ff    	calll  80df <far_jump>
    8308:	66 83 c4 08          	add    $0x8,%esp
}
    830c:	90                   	nop
    830d:	66 c9                	leavel 
    830f:	66 c3                	retl   

00008311 <loader_entry>:

void loader_entry(void) {
    8311:	66 55                	push   %ebp
    8313:	66 89 e5             	mov    %esp,%ebp
    show_msg("....loading....\r\n");
    8316:	66 68 26 90 00 00    	pushl  $0x9026
    831c:	66 e8 e8 fd ff ff    	calll  810a <show_msg>
    8322:	66 83 c4 04          	add    $0x4,%esp
    detect_memory();
    8326:	66 e8 1a fe ff ff    	calll  8146 <detect_memory>
    enter_protect_mode();
    832c:	66 e8 4d ff ff ff    	calll  827f <enter_protect_mode>
    8332:	90                   	nop
    8333:	66 c9                	leavel 
    8335:	66 c3                	retl   

00008337 <inb>:
static inline uint8_t inb(uint16_t port){
    8337:	55                   	push   %bp
    8338:	89 e5                	mov    %sp,%bp
    833a:	83 ec 14             	sub    $0x14,%sp
    833d:	8b 45 08             	mov    0x8(%di),%ax
    8340:	66 89 45 ec          	mov    %eax,-0x14(%di)
    __asm__ __volatile__("inb %[p], %[v]" : [v]"=a"(rv) : [p]"d"(port));
    8344:	0f b7 45 ec          	movzww -0x14(%di),%ax
    8348:	89 c2                	mov    %ax,%dx
    834a:	ec                   	in     (%dx),%al
    834b:	88 45 ff             	mov    %al,-0x1(%di)
    return rv;
    834e:	0f b6 45 ff          	movzbw -0x1(%di),%ax
}
    8352:	c9                   	leave  
    8353:	c3                   	ret    

00008354 <outb>:
static inline void outb(uint16_t port,uint8_t data){
    8354:	55                   	push   %bp
    8355:	89 e5                	mov    %sp,%bp
    8357:	83 ec 08             	sub    $0x8,%sp
    835a:	8b 45 08             	mov    0x8(%di),%ax
    835d:	8b 55 0c             	mov    0xc(%di),%dx
    8360:	66 89 45 fc          	mov    %eax,-0x4(%di)
    8364:	89 d0                	mov    %dx,%ax
    8366:	88 45 f8             	mov    %al,-0x8(%di)
    __asm__ __volatile__("outb %[v], %[p]"::[p]"d"(port),[v]"a"(data));
    8369:	0f b7 55 fc          	movzww -0x4(%di),%dx
    836d:	0f b6 45 f8          	movzbw -0x8(%di),%ax
    8371:	ee                   	out    %al,(%dx)
}
    8372:	90                   	nop
    8373:	c9                   	leave  
    8374:	c3                   	ret    

00008375 <read_cr0>:
static inline uint32_t read_cr0(void){
    8375:	55                   	push   %bp
    8376:	89 e5                	mov    %sp,%bp
    8378:	83 ec 10             	sub    $0x10,%sp
    __asm__ __volatile("mov %%cr0, %[v]":[v]"=r"(cr0));
    837b:	0f 20 c0             	mov    %cr0,%eax
    837e:	89 45 fc             	mov    %ax,-0x4(%di)
    return cr0;
    8381:	8b 45 fc             	mov    -0x4(%di),%ax
}
    8384:	c9                   	leave  
    8385:	c3                   	ret    

00008386 <write_cr0>:
static inline void write_cr0(uint32_t m) {
    8386:	55                   	push   %bp
    8387:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr0"::[v]"r"(m));
    8389:	8b 45 08             	mov    0x8(%di),%ax
    838c:	0f 22 c0             	mov    %eax,%cr0
}
    838f:	90                   	nop
    8390:	5d                   	pop    %bp
    8391:	c3                   	ret    

00008392 <inw>:

//读16位
static inline uint16_t inw(uint16_t  port) {
    8392:	55                   	push   %bp
    8393:	89 e5                	mov    %sp,%bp
    8395:	83 ec 14             	sub    $0x14,%sp
    8398:	8b 45 08             	mov    0x8(%di),%ax
    839b:	66 89 45 ec          	mov    %eax,-0x14(%di)
	uint16_t rv;
	__asm__ __volatile__("in %1, %0" : "=a" (rv) : "dN" (port));
    839f:	0f b7 45 ec          	movzww -0x14(%di),%ax
    83a3:	89 c2                	mov    %ax,%dx
    83a5:	66 ed                	in     (%dx),%eax
    83a7:	66 89 45 fe          	mov    %eax,-0x2(%di)
	return rv;
    83ab:	0f b7 45 fe          	movzww -0x2(%di),%ax
}
    83af:	c9                   	leave  
    83b0:	c3                   	ret    

000083b1 <write_cr3>:
    __asm__ __volatile("mov %%cr3, %[v]":[v]"=r"(cr3));
    return cr3;
}

// //写入cr3寄存器
static inline void write_cr3(uint32_t m) {
    83b1:	55                   	push   %bp
    83b2:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr3"::[v]"r"(m));
    83b4:	8b 45 08             	mov    0x8(%di),%ax
    83b7:	0f 22 d8             	mov    %eax,%cr3
}
    83ba:	90                   	nop
    83bb:	5d                   	pop    %bp
    83bc:	c3                   	ret    

000083bd <read_cr4>:

//读取cr4寄存器
static inline uint32_t read_cr4(void){
    83bd:	55                   	push   %bp
    83be:	89 e5                	mov    %sp,%bp
    83c0:	83 ec 10             	sub    $0x10,%sp
    uint32_t cr4;
    __asm__ __volatile("mov %%cr4, %[v]":[v]"=r"(cr4));
    83c3:	0f 20 e0             	mov    %cr4,%eax
    83c6:	89 45 fc             	mov    %ax,-0x4(%di)
    return cr4;
    83c9:	8b 45 fc             	mov    -0x4(%di),%ax
}
    83cc:	c9                   	leave  
    83cd:	c3                   	ret    

000083ce <write_cr4>:

// //写入cr4寄存器
static inline void write_cr4(uint32_t m) {
    83ce:	55                   	push   %bp
    83cf:	89 e5                	mov    %sp,%bp
    __asm__ __volatile__("mov %[v], %%cr4"::[v]"r"(m));
    83d1:	8b 45 08             	mov    0x8(%di),%ax
    83d4:	0f 22 e0             	mov    %eax,%cr4
}
    83d7:	90                   	nop
    83d8:	5d                   	pop    %bp
    83d9:	c3                   	ret    

000083da <read_disk>:
#include "comm/cpu_instr.h"
#include "loader.h"
#include"comm/elf.h"

//这个函数等价于read_loader 
static void read_disk(int sector, int sector_count, uint8_t * buf) {
    83da:	55                   	push   %bp
    83db:	89 e5                	mov    %sp,%bp
    83dd:	53                   	push   %bx
    83de:	83 ec 10             	sub    $0x10,%sp
    outb(0x1F6, (uint8_t) (0xE0));
    83e1:	68 e0 00             	push   $0xe0
    83e4:	00 00                	add    %al,(%bx,%si)
    83e6:	68 f6 01             	push   $0x1f6
    83e9:	00 00                	add    %al,(%bx,%si)
    83eb:	e8 64 ff             	call   8352 <inb+0x1b>
    83ee:	ff                   	(bad)  
    83ef:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	outb(0x1F2, (uint8_t) (sector_count >> 8));
    83f3:	8b 45 0c             	mov    0xc(%di),%ax
    83f6:	c1 f8 08             	sar    $0x8,%ax
    83f9:	0f b6 c0             	movzbw %al,%ax
    83fc:	50                   	push   %ax
    83fd:	68 f2 01             	push   $0x1f2
    8400:	00 00                	add    %al,(%bx,%si)
    8402:	e8 4d ff             	call   8352 <inb+0x1b>
    8405:	ff                   	(bad)  
    8406:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F3, (uint8_t) (sector >> 24));		// LBA参数的24~31位
    840a:	8b 45 08             	mov    0x8(%di),%ax
    840d:	c1 f8 18             	sar    $0x18,%ax
    8410:	0f b6 c0             	movzbw %al,%ax
    8413:	50                   	push   %ax
    8414:	68 f3 01             	push   $0x1f3
    8417:	00 00                	add    %al,(%bx,%si)
    8419:	e8 36 ff             	call   8352 <inb+0x1b>
    841c:	ff                   	(bad)  
    841d:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F4, (uint8_t) (0));					// LBA参数的32~39位
    8421:	6a 00                	push   $0x0
    8423:	68 f4 01             	push   $0x1f4
    8426:	00 00                	add    %al,(%bx,%si)
    8428:	e8 27 ff             	call   8352 <inb+0x1b>
    842b:	ff                   	(bad)  
    842c:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
    outb(0x1F5, (uint8_t) (0));					// LBA参数的40~47位
    8430:	6a 00                	push   $0x0
    8432:	68 f5 01             	push   $0x1f5
    8435:	00 00                	add    %al,(%bx,%si)
    8437:	e8 18 ff             	call   8352 <inb+0x1b>
    843a:	ff                   	(bad)  
    843b:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

    outb(0x1F2, (uint8_t) (sector_count));
    843f:	8b 45 0c             	mov    0xc(%di),%ax
    8442:	0f b6 c0             	movzbw %al,%ax
    8445:	50                   	push   %ax
    8446:	68 f2 01             	push   $0x1f2
    8449:	00 00                	add    %al,(%bx,%si)
    844b:	e8 04 ff             	call   8352 <inb+0x1b>
    844e:	ff                   	(bad)  
    844f:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F3, (uint8_t) (sector));			// LBA参数的0~7位
    8453:	8b 45 08             	mov    0x8(%di),%ax
    8456:	0f b6 c0             	movzbw %al,%ax
    8459:	50                   	push   %ax
    845a:	68 f3 01             	push   $0x1f3
    845d:	00 00                	add    %al,(%bx,%si)
    845f:	e8 f0 fe             	call   8352 <inb+0x1b>
    8462:	ff                   	(bad)  
    8463:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F4, (uint8_t) (sector >> 8));		// LBA参数的8~15位
    8467:	8b 45 08             	mov    0x8(%di),%ax
    846a:	c1 f8 08             	sar    $0x8,%ax
    846d:	0f b6 c0             	movzbw %al,%ax
    8470:	50                   	push   %ax
    8471:	68 f4 01             	push   $0x1f4
    8474:	00 00                	add    %al,(%bx,%si)
    8476:	e8 d9 fe             	call   8352 <inb+0x1b>
    8479:	ff                   	(bad)  
    847a:	ff 83 c4 08          	incw   0x8c4(%bp,%di)
	outb(0x1F5, (uint8_t) (sector >> 16));		// LBA参数的16~23位
    847e:	8b 45 08             	mov    0x8(%di),%ax
    8481:	c1 f8 10             	sar    $0x10,%ax
    8484:	0f b6 c0             	movzbw %al,%ax
    8487:	50                   	push   %ax
    8488:	68 f5 01             	push   $0x1f5
    848b:	00 00                	add    %al,(%bx,%si)
    848d:	e8 c2 fe             	call   8352 <inb+0x1b>
    8490:	ff                   	(bad)  
    8491:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	outb(0x1F7, (uint8_t) 0x24);
    8495:	6a 24                	push   $0x24
    8497:	68 f7 01             	push   $0x1f7
    849a:	00 00                	add    %al,(%bx,%si)
    849c:	e8 b3 fe             	call   8352 <inb+0x1b>
    849f:	ff                   	(bad)  
    84a0:	ff 83 c4 08          	incw   0x8c4(%bp,%di)

	// 读取数据
	uint16_t *data_buf = (uint16_t*) buf;
    84a4:	8b 45 10             	mov    0x10(%di),%ax
    84a7:	89 45 f8             	mov    %ax,-0x8(%di)
	while (sector_count-- > 0) {
    84aa:	eb 4a                	jmp    84f6 <read_disk+0x11c>
		// 每次扇区读之前都要检查，等待数据就绪
		while ((inb(0x1F7) & 0x88) != 0x8) {}
    84ac:	90                   	nop
    84ad:	68 f7 01             	push   $0x1f7
    84b0:	00 00                	add    %al,(%bx,%si)
    84b2:	e8 80 fe             	call   8335 <loader_entry+0x24>
    84b5:	ff                   	(bad)  
    84b6:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84ba:	0f b6 c0             	movzbw %al,%ax
    84bd:	25 88 00             	and    $0x88,%ax
    84c0:	00 00                	add    %al,(%bx,%si)
    84c2:	83 f8 08             	cmp    $0x8,%ax
    84c5:	75 e6                	jne    84ad <read_disk+0xd3>

		// 读取并将数据写入到缓存中
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    84c7:	c7 45 f4 00 00       	movw   $0x0,-0xc(%di)
    84cc:	00 00                	add    %al,(%bx,%si)
    84ce:	eb 1d                	jmp    84ed <read_disk+0x113>
			*data_buf++ = inw(0x1F0);
    84d0:	8b 5d f8             	mov    -0x8(%di),%bx
    84d3:	8d 43 02             	lea    0x2(%bp,%di),%ax
    84d6:	89 45 f8             	mov    %ax,-0x8(%di)
    84d9:	68 f0 01             	push   $0x1f0
    84dc:	00 00                	add    %al,(%bx,%si)
    84de:	e8 af fe             	call   8390 <write_cr0+0xa>
    84e1:	ff                   	(bad)  
    84e2:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    84e6:	66 89 03             	mov    %eax,(%bp,%di)
		for (int i = 0; i < SECTOR_SIZE / 2; i++) {
    84e9:	83 45 f4 01          	addw   $0x1,-0xc(%di)
    84ed:	81 7d f4 ff 00       	cmpw   $0xff,-0xc(%di)
    84f2:	00 00                	add    %al,(%bx,%si)
    84f4:	7e da                	jle    84d0 <read_disk+0xf6>
	while (sector_count-- > 0) {
    84f6:	8b 45 0c             	mov    0xc(%di),%ax
    84f9:	8d 50 ff             	lea    -0x1(%bx,%si),%dx
    84fc:	89 55 0c             	mov    %dx,0xc(%di)
    84ff:	85 c0                	test   %ax,%ax
    8501:	7f a9                	jg     84ac <read_disk+0xd2>
		}
	}
}
    8503:	90                   	nop
    8504:	90                   	nop
    8505:	8b 5d fc             	mov    -0x4(%di),%bx
    8508:	c9                   	leave  
    8509:	c3                   	ret    

0000850a <die>:

/**
 * 死机
 */
static void die (int code) {
    850a:	55                   	push   %bp
    850b:	89 e5                	mov    %sp,%bp
    for (;;) {
    850d:	eb fe                	jmp    850d <die+0x3>

0000850f <reload_elf_file>:
    }
}

//这里之所以kernel需要加载.elf而前面的boot和loader不需要
//是因为前两个过于简单，所以cmake将其直接生成为.bin,而kernel被上称为.elf
static uint32_t reload_elf_file (uint8_t * file_buffer) {
    850f:	55                   	push   %bp
    8510:	89 e5                	mov    %sp,%bp
    8512:	83 ec 20             	sub    $0x20,%sp
    // 读取的只是ELF文件，不像BIN那样可直接运行，需要从中加载出有效数据和代码
    // 简单判断是否是合法的ELF文件
    Elf32_Ehdr * elf_hdr = (Elf32_Ehdr *)file_buffer;
    8515:	8b 45 08             	mov    0x8(%di),%ax
    8518:	89 45 e8             	mov    %ax,-0x18(%di)
    if ((elf_hdr->e_ident[0] != ELF_MAGIC) || (elf_hdr->e_ident[1] != 'E')
    851b:	8b 45 e8             	mov    -0x18(%di),%ax
    851e:	0f b6 00             	movzbw (%bx,%si),%ax
    8521:	3c 7f                	cmp    $0x7f,%al
    8523:	75 21                	jne    8546 <reload_elf_file+0x37>
    8525:	8b 45 e8             	mov    -0x18(%di),%ax
    8528:	0f b6 40 01          	movzbw 0x1(%bx,%si),%ax
    852c:	3c 45                	cmp    $0x45,%al
    852e:	75 16                	jne    8546 <reload_elf_file+0x37>
        || (elf_hdr->e_ident[2] != 'L') || (elf_hdr->e_ident[3] != 'F')) {
    8530:	8b 45 e8             	mov    -0x18(%di),%ax
    8533:	0f b6 40 02          	movzbw 0x2(%bx,%si),%ax
    8537:	3c 4c                	cmp    $0x4c,%al
    8539:	75 0b                	jne    8546 <reload_elf_file+0x37>
    853b:	8b 45 e8             	mov    -0x18(%di),%ax
    853e:	0f b6 40 03          	movzbw 0x3(%bx,%si),%ax
    8542:	3c 46                	cmp    $0x46,%al
    8544:	74 0a                	je     8550 <reload_elf_file+0x41>
        return 0;
    8546:	b8 00 00             	mov    $0x0,%ax
    8549:	00 00                	add    %al,(%bx,%si)
    854b:	e9 d7 00             	jmp    8625 <reload_elf_file+0x116>
    854e:	00 00                	add    %al,(%bx,%si)
    }

    // 然后从中加载程序头，将内容拷贝到相应的位置
    for (int i = 0; i < elf_hdr->e_phnum; i++) {
    8550:	c7 45 fc 00 00       	movw   $0x0,-0x4(%di)
    8555:	00 00                	add    %al,(%bx,%si)
    8557:	e9 b2 00             	jmp    860c <reload_elf_file+0xfd>
    855a:	00 00                	add    %al,(%bx,%si)
        Elf32_Phdr * phdr = (Elf32_Phdr *)(file_buffer + elf_hdr->e_phoff) + i;
    855c:	8b 45 e8             	mov    -0x18(%di),%ax
    855f:	8b 50 1c             	mov    0x1c(%bx,%si),%dx
    8562:	8b 45 fc             	mov    -0x4(%di),%ax
    8565:	c1 e0 05             	shl    $0x5,%ax
    8568:	01 c2                	add    %ax,%dx
    856a:	8b 45 08             	mov    0x8(%di),%ax
    856d:	01 d0                	add    %dx,%ax
    856f:	89 45 e4             	mov    %ax,-0x1c(%di)
        if (phdr->p_type != PT_LOAD) {
    8572:	8b 45 e4             	mov    -0x1c(%di),%ax
    8575:	8b 00                	mov    (%bx,%si),%ax
    8577:	83 f8 01             	cmp    $0x1,%ax
    857a:	0f 85 89 00          	jne    8607 <reload_elf_file+0xf8>
    857e:	00 00                	add    %al,(%bx,%si)
            continue;
        }

		// 全部使用物理地址，此时分页机制还未打开
        uint8_t * src = file_buffer + phdr->p_offset;
    8580:	8b 45 e4             	mov    -0x1c(%di),%ax
    8583:	8b 50 04             	mov    0x4(%bx,%si),%dx
    8586:	8b 45 08             	mov    0x8(%di),%ax
    8589:	01 d0                	add    %dx,%ax
    858b:	89 45 f8             	mov    %ax,-0x8(%di)
        uint8_t * dest = (uint8_t *)phdr->p_paddr;
    858e:	8b 45 e4             	mov    -0x1c(%di),%ax
    8591:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    8594:	89 45 f4             	mov    %ax,-0xc(%di)
        for (int j = 0; j < phdr->p_filesz; j++) {
    8597:	c7 45 f0 00 00       	movw   $0x0,-0x10(%di)
    859c:	00 00                	add    %al,(%bx,%si)
    859e:	eb 1b                	jmp    85bb <reload_elf_file+0xac>
            *dest++ = *src++;
    85a0:	8b 55 f8             	mov    -0x8(%di),%dx
    85a3:	8d 42 01             	lea    0x1(%bp,%si),%ax
    85a6:	89 45 f8             	mov    %ax,-0x8(%di)
    85a9:	8b 45 f4             	mov    -0xc(%di),%ax
    85ac:	8d 48 01             	lea    0x1(%bx,%si),%cx
    85af:	89 4d f4             	mov    %cx,-0xc(%di)
    85b2:	0f b6 12             	movzbw (%bp,%si),%dx
    85b5:	88 10                	mov    %dl,(%bx,%si)
        for (int j = 0; j < phdr->p_filesz; j++) {
    85b7:	83 45 f0 01          	addw   $0x1,-0x10(%di)
    85bb:	8b 45 e4             	mov    -0x1c(%di),%ax
    85be:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85c1:	8b 45 f0             	mov    -0x10(%di),%ax
    85c4:	39 c2                	cmp    %ax,%dx
    85c6:	77 d8                	ja     85a0 <reload_elf_file+0x91>
        }

		// memsz和filesz不同时，后续要填0
		dest= (uint8_t *)phdr->p_paddr + phdr->p_filesz;
    85c8:	8b 45 e4             	mov    -0x1c(%di),%ax
    85cb:	8b 50 10             	mov    0x10(%bx,%si),%dx
    85ce:	8b 45 e4             	mov    -0x1c(%di),%ax
    85d1:	8b 40 0c             	mov    0xc(%bx,%si),%ax
    85d4:	01 d0                	add    %dx,%ax
    85d6:	89 45 f4             	mov    %ax,-0xc(%di)
		for (int j = 0; j < phdr->p_memsz - phdr->p_filesz; j++) {
    85d9:	c7 45 ec 00 00       	movw   $0x0,-0x14(%di)
    85de:	00 00                	add    %al,(%bx,%si)
    85e0:	eb 10                	jmp    85f2 <reload_elf_file+0xe3>
			*dest++ = 0;
    85e2:	8b 45 f4             	mov    -0xc(%di),%ax
    85e5:	8d 50 01             	lea    0x1(%bx,%si),%dx
    85e8:	89 55 f4             	mov    %dx,-0xc(%di)
    85eb:	c6 00 00             	movb   $0x0,(%bx,%si)
		for (int j = 0; j < phdr->p_memsz - phdr->p_filesz; j++) {
    85ee:	83 45 ec 01          	addw   $0x1,-0x14(%di)
    85f2:	8b 45 e4             	mov    -0x1c(%di),%ax
    85f5:	8b 50 14             	mov    0x14(%bx,%si),%dx
    85f8:	8b 45 e4             	mov    -0x1c(%di),%ax
    85fb:	8b 40 10             	mov    0x10(%bx,%si),%ax
    85fe:	29 c2                	sub    %ax,%dx
    8600:	8b 45 ec             	mov    -0x14(%di),%ax
    8603:	39 c2                	cmp    %ax,%dx
    8605:	77 db                	ja     85e2 <reload_elf_file+0xd3>
    8607:	eb 01                	jmp    860a <reload_elf_file+0xfb>
            continue;
    8609:	90                   	nop
    for (int i = 0; i < elf_hdr->e_phnum; i++) {
    860a:	83 45 fc 01          	addw   $0x1,-0x4(%di)
    860e:	8b 45 e8             	mov    -0x18(%di),%ax
    8611:	0f b7 40 2c          	movzww 0x2c(%bx,%si),%ax
    8615:	0f b7 c0             	movzww %ax,%ax
    8618:	39 45 fc             	cmp    %ax,-0x4(%di)
    861b:	0f 8c 3b ff          	jl     855a <reload_elf_file+0x4b>
    861f:	ff                   	(bad)  
    8620:	ff 8b 45 e8          	decw   -0x17bb(%bp,%di)
		}
    }

    return elf_hdr->e_entry;   //0x10000处
    8624:	8b 40 18             	mov    0x18(%bx,%si),%ax
}
    8627:	c9                   	leave  
    8628:	c3                   	ret    

00008629 <enable_page_mode>:
#define CR4_PSE   (1 << 4)    //巨页
#define CR0_PG    (1 << 31)   //开启分页的标志


//打开分页机制
void enable_page_mode(void){
    8629:	55                   	push   %bp
    862a:	89 e5                	mov    %sp,%bp
    862c:	83 ec 10             	sub    $0x10,%sp
    //第0个表项的最高10位表示映射的起始地址，这里不写表示从0开始,即0-4M不做映射，逻辑地址等价于物理地址
    static uint32_t page_dir[1024] __attribute__((aligned(4096)))={
        [0]=PDE_P | PDE_W | PDE_PS | 0           //只是简单的对0-4M进行映射(同地址映射)
    };
    //设置cr4寄存器,设置其中PS位为1，打开巨页模式
    uint32_t cr4=read_cr4();
    862f:	e8 89 fd             	call   83bb <write_cr3+0xa>
    8632:	ff                   	(bad)  
    8633:	ff 89 45 fc          	decw   -0x3bb(%bx,%di)
    write_cr4(cr4 | CR4_PSE);
    8637:	8b 45 fc             	mov    -0x4(%di),%ax
    863a:	83 c8 10             	or     $0x10,%ax
    863d:	50                   	push   %ax
    863e:	e8 8b fd             	call   83cc <read_cr4+0xf>
    8641:	ff                   	(bad)  
    8642:	ff 83 c4 04          	incw   0x4c4(%bp,%di)

    //设置cr3寄存器，将page_dir加载进去
    write_cr3((uint32_t)page_dir);
    8646:	b8 00 c0             	mov    $0xc000,%ax
    8649:	00 00                	add    %al,(%bx,%si)
    864b:	50                   	push   %ax
    864c:	e8 60 fd             	call   83af <inw+0x1d>
    864f:	ff                   	(bad)  
    8650:	ff 83 c4 04          	incw   0x4c4(%bp,%di)

    //开启分页机制
    write_cr0(read_cr0() | CR0_PG);
    8654:	e8 1c fd             	call   8373 <outb+0x1f>
    8657:	ff                   	(bad)  
    8658:	ff 0d                	decw   (%di)
    865a:	00 00                	add    %al,(%bx,%si)
    865c:	00 80 50 e8          	add    %al,-0x17b0(%bx,%si)
    8660:	22 fd                	and    %ch,%bh
    8662:	ff                   	(bad)  
    8663:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
}
    8667:	90                   	nop
    8668:	c9                   	leave  
    8669:	c3                   	ret    

0000866a <load_kernel>:

void load_kernel(void){ 
    866a:	55                   	push   %bp
    866b:	89 e5                	mov    %sp,%bp
    866d:	83 ec 18             	sub    $0x18,%sp
    //将内核代码加载出来,读到1M的位置,此时这个位置上的数据是.elf类型
    read_disk(100,500,(uint8_t*)SYS_KERNEL_LOAD_ADDR);
    8670:	68 00 00             	push   $0x0
    8673:	10 00                	adc    %al,(%bx,%si)
    8675:	68 f4 01             	push   $0x1f4
    8678:	00 00                	add    %al,(%bx,%si)
    867a:	6a 64                	push   $0x64
    867c:	e8 59 fd             	call   83d8 <write_cr4+0xa>
    867f:	ff                   	(bad)  
    8680:	ff 83 c4 0c          	incw   0xcc4(%bp,%di)
    uint32_t kernel_entry=reload_elf_file((uint8_t *)SYS_KERNEL_LOAD_ADDR);
    8684:	68 00 00             	push   $0x0
    8687:	10 00                	adc    %al,(%bx,%si)
    8689:	e8 81 fe             	call   850d <die+0x3>
    868c:	ff                   	(bad)  
    868d:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
    8691:	89 45 f4             	mov    %ax,-0xc(%di)
	if(kernel_entry==0){
    8694:	83 7d f4 00          	cmpw   $0x0,-0xc(%di)
    8698:	75 0a                	jne    86a4 <load_kernel+0x3a>
		die(-1);
    869a:	6a ff                	push   $0xffff
    869c:	e8 69 fe             	call   8508 <read_disk+0x12e>
    869f:	ff                   	(bad)  
    86a0:	ff 83 c4 04          	incw   0x4c4(%bp,%di)
	}

    //打开分页机制
    enable_page_mode();
    86a4:	e8 80 ff             	call   8627 <reload_elf_file+0x118>
    86a7:	ff                   	(bad)  
    86a8:	ff 8b 45 f4          	decw   -0xbbb(%bp,%di)
	
	((void(*)(boot_info_t*))kernel_entry)(&boot_info);
    86ac:	83 ec 0c             	sub    $0xc,%sp
    86af:	68 00 d0             	push   $0xd000
    86b2:	00 00                	add    %al,(%bx,%si)
    86b4:	ff d0                	call   *%ax
    86b6:	83 c4 10             	add    $0x10,%sp
    86b9:	90                   	nop
    86ba:	c9                   	leave  
    86bb:	c3                   	ret    
